/**
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */
'use strict';

const HttpContext = require('./HttpContext');
const HttpResponse = require('../Response/HttpResponse');
const request = require('request');
const APIHelper = require('../../APIHelper');

// Convert to request's version of http request
let convertHttpRequest = function convertHttpRequest(req) {
    let options = {
        url: req.queryUrl,
        method: req.method,
        headers: req.headers
    };
    if (req.username) {
        options.auth = {user: req.username, pass: req.password};
    }
    if (req.body) {
        options.body = req.body;
    }
    if (req.formData) {
        // Need to add to request's formdata object directly
        // options.formData = APIHelper.formDataEncodeObject(req.formData);
    }
    if (req.form) {
        options.form = APIHelper.urlEncodeObject(req.form);
        options.headers['content-type'] = 'application/x-www-form-urlencoded';
    }
    return options;
};

let appendFormdata = function appendFormdata(form, data) {
    let dataArray = APIHelper.formDataEncodeObject(data);
    for (let index in dataArray) {
        let key = dataArray[index].key;
        let value = dataArray[index].value;
        form.append(key, value);
    }
};

let convertHttpResponse = function convertHttpResponse(resp) {
    let response = new HttpResponse();
    if (resp) {
        response.body = resp.body;
        response.headers = resp.headers;
        response.statusCode = resp.statusCode;
    }

    return response;
};

/**
 * Execute a given HttpRequest to get string response back
* @param	{HttpRequest | HttpBodyRequest}		req    The query string builder to replace the template parameters
 * @param	{function}	callback   Callback function to execute when request completes or fails
 * @param	{Array} parameters    The parameters to replace in the queryBuilder
 * @returns	{void}				  Does not return anything
 */
let executeRequest = function executeRequest(req, callback) {
    // Convert abstracted request to request's http request
    let convertedRequest = convertHttpRequest(req);
    let context = new HttpContext();
    context.request = req;

    // Make a temp callback
    let internalCallback = function cb(error, res, body) {
        let response = convertHttpResponse(res);
        context.response = response;
        callback(error, response, context);
    };

    // Make the request;
    let rq = request(convertedRequest, internalCallback);
    // Add formdata directly.
    if (req.formData) {
        let form = rq.form();
        appendFormdata(form, req.formData);
    }
};
module.exports = executeRequest;
